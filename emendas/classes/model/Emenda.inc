<?php
/**
 * Classe de mapeamento da entidade emendas.emenda
 *
 * @category Class
 * @package  A1
 * @author   ORION TELES DE MESQUITA <orion.mesquita@cultura.gov.br>
 * @license  GNU simec.mec.gov.br
 * @version  Release: 13-11-2017
 * @link     no link
 */


require_once APPRAIZ. 'includes/classes/Modelo.class.inc';
include_once APPRAIZ. 'emendas/classes/service/WSIntegracaoSiconv.class.inc';


/**
 * Emendas_Model_Emenda
 *
 * @category Class
 * @package  A1
 * @author    <>
 * @license  GNU simec.mec.gov.br
 * @version  Release:
 * @link     no link
 */
class Emendas_Model_Emenda extends Modelo
{
    /**
     * Nome da tabela especificada
     * @var string
     * @access protected
     */
    protected $stNomeTabela = 'emendas.emenda';

    /**
     * Chave primaria.
     * @var array
     * @access protected
     */
    protected $arChavePrimaria = array(
        'emeid',
    );
    /**
     * Chaves estrangeiras.
     * @var array
     */
    protected $arChaveEstrangeira = array(
        'prsano' => array('tabela' => 'emendas.programacaoexercicio', 'pk' => 'prsano'),
        'autid' => array('tabela' => 'emendas.autor', 'pk' => 'autid'),
        'ptrid' => array('tabela' => 'monitora.ptres', 'pk' => 'ptrid'),
        'unoid' => array('tabela' => 'unidadeorcamentaria', 'pk' => 'unoid')
    );

    /**
     * Atributos
     * @var array
     * @access protected
     */
    protected $arAtributos = array(
        'emeid' => null,
        'emenumero' => null,
        'unoid' => null,
        'ptrid' => null,
        'emejustificativa' => null,
        'emeimpositiva' => null,
        'autid' => null,
        'prsano' => null,
        'emestatus' => null,
        'emeatualizacaosiconv' => null,
    );

    /**
     * Monta SQL com filtros da consulta principal de Emedas.
     * 
     * @param stdClass $filtro
     * @return string
     */
    public function montarSqlFiltrosListaEmendas(stdClass $filtro) {
        # Filtros
        $where = NULL;
        if($filtro->listaSubUnidadeUsuario){
            # Expressão para verificar se o estado é após enviado para preenchimento da unidade.
            $where .= "\n AND doce.esdid IN(". ESD_BENEFICIARIO_PREENCHIMENTO_UNIDADE. ','. ESD_BENEFICIARIO_CORRECAO. ','. ESD_BENEFICIARIO_PI_GERADO. ','. ESD_BENEFICIARIO_PI_APROVADO. ")";
            # Expressão pra verificar se o beneficiario é da mesa unidade do Usuário Logado com perfil de Unidade.
            $where .= "\n AND (suo.suocod::INTEGER IN(". join(',', $filtro->listaSubUnidadeUsuario). ") OR suoed.suocod::INTEGER IN(". join(',', $filtro->listaSubUnidadeUsuario). ") ) ";
        }
        
        if($filtro->unicod){
            $where .= "\n AND suo.unocod = '". (int)$filtro->unicod. "'";
        }
        if($filtro->suoid){
            $where .= "\n AND suo.suoid =  ". (int)$filtro->suoid;
        }
        if($filtro->unicod_delegada){
            $where .= "\n AND suoed.unocod = '". (int)$filtro->unicod_delegada. "'";
        }
        if($filtro->suoid_delegada){
            $where .= "\n AND suoed.suoid =  ". (int)$filtro->suoid_delegada;
        }
        if($filtro->lista_esdid){
            $where .= "\n AND doce.esdid IN(". join(',', $filtro->lista_esdid). ")";
        }
        if($filtro->lista_sitid){
            $where .= "\n AND
                (
		    SELECT
                        sic.sitid
                    FROM emendas.siconvbeneficiario sbe
                        JOIN emendas.siconv sic ON sic.sicid = sbe.sicid
                    WHERE
			sbe.benid = ben.benid
                    ORDER BY
                        sicsequencial DESC
                    LIMIT 1
                ) IN(". join(',', $filtro->lista_sitid). ")";
        }
        if($filtro->benimpedimento){
            $where .= "\n AND ben.impid ". ($filtro->benimpedimento == 't'? 'IS NOT NULL': 'IS NULL');
        }
        
        return $where;
    }
    
    public function recuperarListagem(stdClass $filtro)
    {
        # Filtros
        $where = $this->montarSqlFiltrosListaEmendas($filtro);

        $sql = "
            SELECT DISTINCT
                eme.emeid,
                eme.emenumero,
                eme.unoid,
                eme.ptrid,
                eme.emeimpositiva,
                eme.autid,
                eme.prsano,
                uno.unosigla unidade,
                aut.autnome,
                aut.autcod,
                COALESCE(rep.qtdrepetida, 0) qtdrepetida,
                pro.pronome,
                (
		    SELECT
                        sit.sitdsc
                    FROM emendas.siconvbeneficiario sbe
                        JOIN emendas.siconv sic ON sic.sicid = sbe.sicid
                        JOIN emendas.siconvsituacao sit ON sit.sitid = sic.sitid
                    WHERE
			sbe.benid = ben.benid
                    ORDER BY
                        sicsequencial DESC
                    LIMIT 1
                ) AS sitdsc,
                (
		    SELECT
                        sic.sicsequencial || '/' || sic.prsano
                    FROM emendas.siconvbeneficiario sbe
                        JOIN emendas.siconv sic ON sic.sicid = sbe.sicid
                        JOIN emendas.siconvsituacao sit ON sit.sitid = sic.sitid
                    WHERE
			sbe.benid = ben.benid
                    ORDER BY
                        sicsequencial DESC
                    LIMIT 1
                ) AS numero_proposta,
                ben.benid,
                suo.suosigla subunidade,
                (SELECT ARRAY_TO_STRING(ARRAY(
                    SELECT
                        unosigla || ' - ' || suonome
                    FROM emendas.delegacao d
                        JOIN public.vw_subunidadeorcamentaria suod ON(d.suoid = suod.suoid)
                    WHERE
                        d.benid = ben.benid
                ), '\n ')) AS subunidade_delegada,
                aut.estuf,
                ben.impid,
                doce.esddsc,
                pi.pliid,
                (
                    SELECT
                        SUM(bedvalor)
                    FROM emendas.beneficiariodetalhe bd
                        JOIN emendas.emendadetalhe ed ON bd.emdid = ed.emdid
                    WHERE
                        bd.bedstatus = 'A'
                        AND bd.benid = ben.benid
                        AND ed.gndcod <= 3
                ) AS custeio,
                (
                    SELECT
                        SUM(bedvalor)
                    FROM emendas.beneficiariodetalhe bd
                        JOIN emendas.emendadetalhe ed ON bd.emdid = ed.emdid
                    WHERE
                        bd.bedstatus = 'A'
                        AND bd.benid = ben.benid
                        AND ed.gndcod >= 4
                ) AS capital,
                pi.empenhado,
                pi.pago
            FROM emendas.emenda eme
                LEFT JOIN emendas.beneficiario ben ON(ben.emeid = eme.emeid AND benstatus = 'A')
                LEFT JOIN emendas.proponente pro ON pro.proid = ben.proid
                JOIN public.unidadeorcamentaria uno ON uno.unoid = eme.unoid
                JOIN emendas.autor aut ON aut.autid = eme.autid
                JOIN monitora.ptres ptr ON ptr.ptrid = eme.ptrid
                LEFT JOIN public.vw_subunidadeorcamentaria suo ON ben.suoid = suo.suoid
                LEFT JOIN emendas.delegacao ed ON ben.benid = ed.benid
                LEFT JOIN public.vw_subunidadeorcamentaria suoed ON ed.suoid = suoed.suoid
                LEFT JOIN workflow.documento doc ON ben.docid = doc.docid
                LEFT JOIN workflow.estadodocumento doce ON doc.esdid = doce.esdid
                LEFT JOIN monitora.vw_planointerno pi ON ben.pliid = pi.pliid
                LEFT JOIN (
                    SELECT
                        eme.emeid,
                        pro.procnpj,
                        COUNT(pro.proid) qtdrepetida
                    FROM
                        emendas.emenda eme
                        INNER JOIN emendas.beneficiario ben ON ben.emeid = eme.emeid
                        INNER JOIN emendas.proponente pro ON pro.proid = ben.proid
                    WHERE
                        EXISTS (
                            SELECT
                                1
                            FROM emendas.siconvbeneficiario sib
                            WHERE
                                sib.emenumero = eme.emenumero
                                AND sib.procnpj = pro.procnpj
                        )
                    GROUP BY
                        eme.emeid,
                        pro.procnpj
                ) rep ON(rep.emeid = eme.emeid AND pro.procnpj = rep.procnpj)
            WHERE
                eme.emestatus = 'A'
                AND eme.prsano = '". (int)$filtro->exercicio. "'
                $where
            ORDER BY
                aut.autnome,
                eme.emenumero,
                pro.pronome
        ";

//ver($sql, d);
        $dados = $this->carregar($sql);
        return $dados ? $dados : [];
    }


    /**
     * Monta consulta pra buscar dados do relat?rio geral
     *
     * @param integer $exercicio
     * @param array $listaSubUnidadeUsuario
     * @return string
     */
    public function montarSqlRelatorioGeral($exercicio, $listaSubUnidadeUsuario = array()){
        $where = '';

        # Sub-Unidade Orçamentária ou Sub-Unidade Orçamentária delegada.
        $where .= $listaSubUnidadeUsuario? "\n AND (suo.suocod::INTEGER IN(". join(',', $listaSubUnidadeUsuario). ") OR suoed.suocod::INTEGER IN(". join(',', $listaSubUnidadeUsuario). ") ) ": NULL;

        $sql = "
           SELECT DISTINCT
		-- DADOS DA EMENDA
		eme.emeid,
		SUBSTRING(eme.emenumero::TEXT FROM 1 FOR 4) || ' ' || SUBSTRING(eme.emenumero::TEXT FROM 5 FOR LENGTH(eme.emenumero::TEXT)) AS emenumero,
                -- AUTOR
                aut.autcod,
                aut.autnome,
                case when aut.autsexo = 'M' then 'Homem' when aut.autsexo = 'F' then 'Mulher' else 'A Identificar' end genero,
                autip.atpdsc as tipo_parlamentar,
                aut.estuf,
                p.parsigla,
                -- UNIDADE
		uno.unocod,
		uno.unosigla,
		ptr.funcional || ' - ' || COALESCE(ptr.acatitulo, '') AS funcional,
                CASE WHEN eme.emeimpositiva = 't' THEN 'Sim' ELSE 'Não' END AS impositiva,
                eme.emejustificativa,
                -- DADOS FINANCEIROS
                /*emed.gndcod,
                emed.mapcod AS mod_aplic,
                emed.foncod AS fonte,
                emed.emdvalor,*/
                coalesce((select sum(coalesce(emed.emdvalor,0)) from emendas.emendadetalhe emed where emed.emeid = eme.emeid and gndcod<=3),0) as custeio,
                coalesce((select sum(coalesce(emed.emdvalor,0)) from emendas.emendadetalhe emed where emed.emeid = eme.emeid and gndcod>3),0) as capital,
                -- BENEFICIARIOS
		ben.benid,
                suo.suocod AS cod_unidade,
                suo.suonome AS unidade,
                suoed.suocod AS cod_unidade_delegada,
                suoed.suonome AS unidade_delegada,
                REPLACE(TO_CHAR(pro.procnpj::NUMERIC, '00:000:000/0000-00'), ':', '.') procnpj,
                pro.pronome,
		esf.esfdsc AS localizacao,
                REPLACE(REPLACE(ARRAY(
			SELECT DISTINCT
				p.paidescricao
			FROM emendas.beneficiariolocalizacao bl -- SELECT * FROM emendas.beneficiariolocalizacao
				JOIN territorios.pais p ON bl.paiid = p.paiid-- SELECT * FROM territorios.pais
			WHERE
				p.paidescricao IS NOT NULL
				AND bl.benid = ben.benid
                )::TEXT, '{', ''), '}', '') AS lista_pais,
                REPLACE(REPLACE(ARRAY(
			SELECT DISTINCT
				bl.estuf
			FROM emendas.beneficiariolocalizacao bl -- SELECT * FROM emendas.beneficiariolocalizacao
			WHERE
				bl.estuf IS NOT NULL
				AND bl.benid = ben.benid
                )::TEXT, '{', ''), '}', '') AS lista_uf,
                REPLACE(REPLACE(ARRAY(
			SELECT DISTINCT
				m.mundescricao || '-' || m.estuf
			FROM emendas.beneficiariolocalizacao bl -- SELECT * FROM emendas.beneficiariolocalizacao
				JOIN territorios.municipio m ON bl.muncod = m.muncod-- SELECT * FROM territorios.municipio
			WHERE
				m.mundescricao IS NOT NULL
				AND bl.benid = ben.benid
                )::TEXT, '{', ''), '}', '') AS lista_municipio,
--                TO_CHAR(ben.bennumeroprocesso::bigint, 'FM00000\".\"000000\"/\"0000\"-\"00') AS processo,
		ben.bennumeroprocesso AS processo,
		TO_CHAR(ben.beninicio,'dd/mm/YYYY') AS vigencia,
		pca.capdsc,
                CASE WHEN bented IS TRUE THEN 'Sim' ELSE 'Não' END AS ted,
                mde.mdedsc,
		nee.needsc,
                REPLACE(REPLACE(REPLACE(ARRAY(
			SELECT DISTINCT
				alo.alodsc
			FROM emendas.beneficiarioalteracao ba -- SELECT * FROM emendas.beneficiarioalteracao
				LEFT JOIN emendas.alteracaoorcamentaria alo ON ba.aloid = alo.aloid -- SELECT alo.alodsc, * FROM emendas.alteracaoorcamentaria
			WHERE
				alo.alodsc IS NOT NULL
				AND ba.benid = ben.benid
                )::TEXT, '{', ''), '}', ''), '\"', '') AS lista_alteracoes,
		CASE WHEN ben.benparecertecnico = 0 THEN 'Não' WHEN ben.benparecertecnico = 1 THEN 'Sim' WHEN ben.benparecertecnico = 2 THEN 'Não se aplica' END AS parecer_tecnico,
		CASE WHEN ben.benparecerjuridico = 0 THEN 'Não' WHEN ben.benparecerjuridico = 1 THEN 'Sim' WHEN ben.benparecerjuridico = 2 THEN 'Não se aplica' END AS parecer_juridico,
		CASE WHEN ben.benimpedimento IS NULL THEN 'Não' WHEN ben.benimpedimento = 0 THEN 'Não' WHEN ben.benimpedimento = 1 THEN 'Sim' WHEN ben.benimpedimento = 2 THEN 'Não se aplica' END AS empedimento,
                CASE WHEN ben.benimpedimento = 1 THEN imp.impdsc END as motivo,
                CASE WHEN ben.benimpedimento = 1 THEN benmotivoimpedimento END as justificativa,
                
        -- DADOS FINANCEIROS DO BENFICIÁRIO
		coalesce((select sum(coalesce(case when eme.gndcod<=3 then bed.bedvalor else 0 end,0)) as bedvalor
			  from emendas.beneficiariodetalhe bed
			  left join emendas.emendadetalhe eme
			    on bed.emdid = eme.emdid
			 where bed.benid = ben.benid
			   AND bed.bedstatus = 'A'),0) as bedvalorcusteio,
		coalesce((select sum(coalesce(case when eme.gndcod>3 then bed.bedvalor else 0 end,0)) as bedvalor
			  from emendas.beneficiariodetalhe bed
			  left join emendas.emendadetalhe eme
			    on bed.emdid = eme.emdid
			 where bed.benid = ben.benid
			   AND bed.bedstatus = 'A'),0) as bedvalorcapital,                           
		coalesce((select sum(coalesce(bed.bedvalorpriorizado,0))
			  from emendas.beneficiariodetalhe bed
			  left join emendas.emendadetalhe eme
			    on bed.emdid = eme.emdid
			 where bed.benid = ben.benid
			   AND bed.bedstatus = 'A'),0) as bedvalorpriorizado,	
		coalesce((select sum(coalesce(bed.bedvalor,0) - coalesce(bed.bedvalorpriorizado,0))
			  from emendas.beneficiariodetalhe bed
			  left join emendas.emendadetalhe eme
			    on bed.emdid = eme.emdid
			 where bed.benid = ben.benid
			   AND bed.bedstatus = 'A'),0) as contigenciado,        
		/*bed.bedvalor,
		bed.bedvalorpriorizado,
                bed.bedvalor - bed.bedvalorpriorizado AS contigenciado,*/
		-- DADOS SICONV
		CASE WHEN prg.prgcodigo IS NOT NULL THEN substr(prg.prgcodigo::TEXT, 1, 6) || ' ' || substr(prg.prgcodigo::TEXT, 6, 4) || ' ' || substr(prg.prgcodigo::TEXT, 10, 4) ELSE NULL END AS numero_programa,
		prg.prgtitulo AS titulo_programa,
		ben.benprogramatitulo AS objeto_programa,
		CASE WHEN bensic.sicsequencial IS NOT NULL THEN bensic.sicsequencial || '/' || bensic.prsano END AS numero_proposta,
		bensic.sicjustificativa AS titulo_proposta,
		bensic.sicobjeto AS objeto_proposta,
		bensit.sitdsc AS situacao_proposta,
                -- SITUAÇÃO WORKFLOW
                doce.esddsc,
		-- PLANO INTERNO
                pi.pliid,
                pi.plicod,
                pi.empenhado,
                pi.pago
            FROM emendas.emenda eme
                -- DADOS DA EMENDA
                LEFT JOIN public.unidadeorcamentaria uno ON uno.unoid = eme.unoid
                LEFT JOIN emendas.autor aut ON(aut.autid = eme.autid AND aut.autstatus = 'A')
                LEFT JOIN emendas.autortipo autip ON aut.atpid = autip.atpid -- SELECT * FROM emendas.autortipo
                LEFT JOIN emendas.partido p ON aut.parid = p.parid -- SELECT * FROM emendas.partido
                LEFT JOIN monitora.vw_ptres ptr ON ptr.ptrid = eme.ptrid
                --LEFT JOIN emendas.emendadetalhe emed ON eme.emeid = emed.emeid -- SELECT * FROM emendas.emendadetalhe
                -- BENEFICIARIOS
                LEFT JOIN emendas.beneficiario ben ON ben.emeid = eme.emeid
                LEFT JOIN emendas.proponente pro ON pro.proid = ben.proid -- SELECT * FROM emendas.proponente
                LEFT JOIN emendas.siconv sic ON sic.sicid = ben.sicid
                LEFT JOIN emendas.siconvsituacao sit ON sit.sitid = sic.sitid
                LEFT JOIN public.vw_subunidadeorcamentaria suo ON ben.suoid = suo.suoid -- SELECT * FROM public.vw_subunidadeorcamentaria
                LEFT JOIN emendas.delegacao ed ON ben.benid = ed.benid
                LEFT JOIN public.vw_subunidadeorcamentaria suoed ON ed.suoid = suoed.suoid
		LEFT JOIN territorios.esfera esf ON ben.esfid = esf.esfid
		LEFT JOIN monitora.pi_categoriaapropriacao pca ON ben.capid = pca.capid -- SELECT * FROM monitora.pi_categoriaapropriacao
		LEFT JOIN monitora.pi_modalidadeensino mde ON ben.mdeid = mde.mdeid
		LEFT JOIN monitora.pi_niveletapaensino nee ON ben.neeid = nee.neeid
		LEFT JOIN emendas.impedimento imp ON ben.impid = imp.impid
                -- DADOS FINANCEIROS DO BENFICIÁRIO
                --LEFT JOIN emendas.beneficiariodetalhe bed ON(bed.benid = ben.benid AND emed.emdid = bed.emdid AND bed.bedstatus = 'A')
		-- DADOS SICONV
		LEFT JOIN emendas.siconvbeneficiario sib ON(ben.benid = sib.benid) -- sib.sicid
		LEFT JOIN emendas.siconvprograma sip ON(sib.sicid = sip.sicid) -- SELECT * FROM emendas.siconvprograma
		LEFT JOIN emendas.programa prg on prg.prgid = sip.prgid -- SELECT * FROM emendas.programa
                LEFT JOIN emendas.siconv bensic on bensic.sicid = sib.sicid -- SELECT * FROM emendas.siconv
                LEFT JOIN emendas.siconvsituacao bensit on bensic.sitid = bensit.sitid
                -- SITUAÇÃO
		LEFT JOIN workflow.documento doc ON ben.docid = doc.docid
		LEFT JOIN workflow.estadodocumento doce ON doc.esdid = doce.esdid
		-- PLANO INTERNO
                LEFT JOIN monitora.vw_planointerno pi ON ben.pliid = pi.pliid
            WHERE
                eme.emestatus = 'A'
                AND ben.benstatus = 'A'
                AND eme.prsano = '". (int)$exercicio. "'
--AND ben.benid = 8670 -- Emenda completa
                $where
            ORDER BY
                1,
                2
        ";
//ver($sql, d);
        return $sql;
    }

    public function importar($files)
    {
        $extensao = substr($files['name'], strrpos($files['name'], '.'));

        $origem = $files['tmp_name'];
        $destino = APPRAIZ . 'emendas/modulos/apoio/importacao/planilha_' . date('YmdHis') . $extensao;
        if(move_uploaded_file($origem , $destino)){

            $file = fopen($destino, 'r');

            $count = 0;
            while (($line = fgetcsv($file, 0, ';')) !== false)
            {

                $line = array_map('trim', $line);
//                    $line = array_map('utf8_decode', $line);

                if(!$count++){ continue; }

                $emenumero = trim($line[2]);
                if(!$emenumero) { continue; }

                $sql = "select emeid from emendas.emenda where emenumero = " . $emenumero;
                $emeid = $this->pegaUm($sql);

                if($emeid){
                    $this->carregarPorId($emeid);
                } else {
                    // Unidade Orçamentária
                    $unocod = substr(trim($line[5]), 0, 5);
                    $unoid = $this->_recuperarUnidadeImportacao($unocod, $_SESSION['exercicio']);

                    // Autor
                    $autid = $this->_recuperarAutorImportacao($line, $_SESSION['exercicio']);

                    // Ação
                    $funcional = $this->_recuperarFuncionalImportacao($line[7], $line[6], $line[8], $unocod, $_SESSION['exercicio']);

                    if(!$funcional || !$autid){ continue; }

                    $this->emenumero = $emenumero;
                    $this->unoid = $unoid;
                    $this->ptrid = $funcional[0]['ptrid'];
                    $this->autid = $autid;
                    $this->emeimpositiva = 't';
                    $this->prsano = $_SESSION['exercicio'];
                    $this->salvar();
                }

                if(is_numeric($line[14])){
                    $this->_inserirBeneficiarioImportacao($line);
                } else {
                    $this->_inserirDetalhesImportacao($line);
                }
                $this->commit();
                $this->emeid = null;
            }
            fclose($file);
            ver('FIM', d);
        }
    }

    private function _recuperarUnidadeImportacao($unocod, $exercicio)
    {
        $sql = "select unoid from public.unidadeorcamentaria where unocod = '{$unocod}' and prsano = '$exercicio'";
        return $this->pegaUm($sql);
    }

    private function _recuperarAutorImportacao($line, $exercicio)
    {
        $dado = $line[0];

        if('(-1)' == substr($dado, 0, 4)){
            return false;
        }

        $autor = explode('-', $dado);
        $autcod = trim($autor[0]);
        $sql = "select autid from emendas.autor where autcod = '{$autcod}' order by autstatus";
        $autid = $this->pegaUm($sql);

        $parsigla = $line[1];
        $sql = "select parid from emendas.partido where parsigla = '{$parsigla}' order by parstatus";
        $parid = $this->pegaUm($sql);

        if(!$parid){
            $mPartido = new Emendas_Model_Partido();
            $mPartido->pardsc = $parsigla;
            $mPartido->parsigla = $parsigla;
            $mPartido->salvar();

            $parid = $mPartido->parid;
        }

        // Atualizando nome e partido do autor
        $mAutor = new Emendas_Model_Autor($autid);
        $mAutor->autcod = $autcod;
        $mAutor->autnome = trim($autor[1]);
        $mAutor->parid = $parid;
        $mAutor->salvar();
        $autid = $mAutor->autid;

        return $autid;
    }

    private function _recuperarFuncionalImportacao($acao, $programa, $localizador, $unocod, $exercicio)
    {
        $acacod = substr(trim($acao), 0, 4);
        $prgcod = substr(trim($programa), 0, 4);
        $loccod = substr(trim($localizador), 0, 4);
        $sql = "select * from monitora.ptres where acacod = '$acacod' and prgcod = '$prgcod' and loccod = '$loccod' and unicod = '$unocod' and ptrano = '{$exercicio}' and plocod = 'EIND' and ptrstatus = 'A'";

        $funcional = $this->carregar($sql);
        if(count($funcional)> 1){
            ver('Mais de uma ação', d);
        }

        return $funcional;
    }

    private function _inserirDetalhesImportacao($line)
    {
        $mEmendaDetalhe = new Emendas_Model_EmendaDetalhe();
        $mEmendaDetalhe->emeid = $this->emeid;
        $mEmendaDetalhe->foncod = $line[9];
        $mEmendaDetalhe->gndcod = $line[12];
        $mEmendaDetalhe->mapcod = $line[13];
        $mEmendaDetalhe->emdvalor = str_replace(['.', ','], ['', '.'], $line[18]) + str_replace(['.', ','], ['', '.'], $line[20]);

        return $mEmendaDetalhe->salvar();
    }

    private function _inserirBeneficiarioImportacao($line)
    {
        $proponente = explode('-', $line[15]);

        if(count($proponente) >= 2){
            $procnpj = trim(array_shift($proponente));
            $sql = "select proid from emendas.proponente where procnpj = '{$procnpj}' order by prostatus";

        } else {
            $sql = "select proid from emendas.proponente where procnpj = '00000000000000' order by prostatus";
        }

        $proid = $this->pegaUm($sql);

        if(!$proid){
            $mProponente = new Emendas_Model_Proponente();
            $mProponente->procnpj = $procnpj;
            $mProponente->pronome = trim(implode(' - ', $proponente));
            $mProponente->salvar();
            $proid = $mProponente->proid;
        }

        $sql = "select benid from emendas.beneficiario where emeid = {$this->emeid} and proid = {$proid}";
        $benid = $this->pegaUm($sql);

        $mBeneficiario = new Emendas_Model_Beneficiario($benid);

        if(!$benid){
            $mBeneficiario->emeid = $this->emeid;
            $mBeneficiario->proid = $proid;

            $mBeneficiario->salvar();
        }

        $this->_inserirBeneficiarioDetalhe($mBeneficiario->benid, $mBeneficiario->emeid, $line);
    }

    private function _inserirBeneficiarioDetalhe($benid, $emeid, $line)
    {
        $gndcod = $line[12];

        $sql = "select emdid from emendas.emendadetalhe where gndcod = {$gndcod} and emeid = {$emeid}";
        $emdid = $this->pegaUm($sql);

        $mBeneficiarioDetalhe = new Emendas_Model_BeneficiarioDetalhe();
        $mBeneficiarioDetalhe->benid = $benid;
        $mBeneficiarioDetalhe->emdid = $emdid;
        $mBeneficiarioDetalhe->bedvalor = str_replace(['.', ','], ['', '.'], $line[19]);
        $mBeneficiarioDetalhe->bedvalorpriorizado = str_replace(['.', ','], ['', '.'], $line[20]);

        return $mBeneficiarioDetalhe->salvar();
    }

    public function gerarGraficoUf($exercicio)
    {
        $sql = "select  case when coalesce(aut.estuf, '') = '' then 'A Identificar' else  aut.estuf end categoria,
                        'Valor LOA' descricao, sum(bed.bedvalor) valor
                from emendas.emenda eme
                        inner join emendas.autor aut on aut.autid = eme.autid
                        inner join emendas.beneficiario ben on ben.emeid = eme.emeid
                        inner join emendas.beneficiariodetalhe bed on bed.benid = ben.benid
                where
                    eme.emestatus = 'A'
                    AND ben.benstatus = 'A'
                    AND eme.prsano = '$exercicio'
                group by aut.estuf, categoria
                union all
                select  case when coalesce(aut.estuf, '') = '' then 'A Identificar' else  aut.estuf end categoria,
                        'Valor Após Contingenciamento' descricao, sum(bed.bedvalorpriorizado) valor
                from emendas.emenda eme
                        inner join emendas.autor aut on aut.autid = eme.autid
                        inner join emendas.beneficiario ben on ben.emeid = eme.emeid
                        inner join emendas.beneficiariodetalhe bed on bed.benid = ben.benid
                where
                    eme.emestatus = 'A'
                    AND ben.benstatus = 'A'
                    AND eme.prsano = '$exercicio'
                group by aut.estuf, categoria
                order by categoria, descricao desc";

        $dados = $this->carregar($sql);
        $dados = $dados ? $dados : [];

        $dadosAgrupados = [];
        foreach ($dados as $dado) {
            $dadosAgrupados[$dado['categoria']][$dado['descricao']] = $dado['valor'];
        }

        $sqlPizza = "  select  case when coalesce(reg.regdescricao, '') = '' then 'A Identificar' else  reg.regdescricao end descricao, reg.regcod, sum(bed.bedvalor) valor
                        from emendas.emenda eme
                                inner join emendas.autor aut on aut.autid = eme.autid
                                left join territorios.estado est on est.estuf = aut.estuf
                                left join territorios.regiao reg on reg.regcod = est.regcod
                                inner join emendas.beneficiario ben on ben.emeid = eme.emeid
                                inner join emendas.beneficiariodetalhe bed on bed.benid = ben.benid
                        where
                            eme.emestatus = 'A'
                            AND ben.benstatus = 'A'
                            AND eme.prsano = '$exercicio'
                        group by descricao, reg.regcod
                        order by reg.regcod";

        $sql = "select  case when coalesce(reg.regdescricao, '') = '' then 'A Identificar' else  reg.regdescricao end categoria, reg.regcod,
                        'Valor LOA' descricao, sum(bed.bedvalor) valor
                from emendas.emenda eme
                        inner join emendas.autor aut on aut.autid = eme.autid
                        left join territorios.estado est on est.estuf = aut.estuf
                        left join territorios.regiao reg on reg.regcod = est.regcod
                        inner join emendas.beneficiario ben on ben.emeid = eme.emeid
                        inner join emendas.beneficiariodetalhe bed on bed.benid = ben.benid
                where
                    eme.emestatus = 'A'
                    AND ben.benstatus = 'A'
                    AND eme.prsano = '$exercicio'
                group by descricao, reg.regcod, categoria
                union all
                select  case when coalesce(reg.regdescricao, '') = '' then 'A Identificar' else  reg.regdescricao end categoria, reg.regcod,
                        'Valor Após Contingenciamento' descricao, sum(bed.bedvalorpriorizado) valor
                from emendas.emenda eme
                        inner join emendas.autor aut on aut.autid = eme.autid
                        left join territorios.estado est on est.estuf = aut.estuf
                        left join territorios.regiao reg on reg.regcod = est.regcod
                        inner join emendas.beneficiario ben on ben.emeid = eme.emeid
                        inner join emendas.beneficiariodetalhe bed on bed.benid = ben.benid
                where
                    eme.emestatus = 'A'
                    AND ben.benstatus = 'A'
                    AND eme.prsano = '$exercicio'
                group by descricao, reg.regcod, categoria
                order by regcod, categoria desc";

        $dadosRegiao = $this->carregar($sql);
        $dadosRegiao = $dadosRegiao ? $dadosRegiao : [];

        $dadosAgrupadosRegiao = [];
        foreach ($dadosRegiao as $dado) {
            $dadosAgrupadosRegiao[$dado['categoria']][$dado['descricao']] = $dado['valor'];
        }

        include_once APPRAIZ . 'emendas/modulos/principal/grafico_uf.inc';
    }

    public function gerarGraficoPartido($exercicio)
    {
        $sql = "select  case when coalesce(par.parsigla, '') = '' then 'A Identificar' else par.parsigla end categoria, par.pardsc,
                        'Valor LOA' descricao, sum(bed.bedvalor) valor
                from emendas.emenda eme
                        inner join emendas.autor aut on aut.autid = eme.autid
                        inner join emendas.partido par on par.parid = aut.parid
                        inner join emendas.beneficiario ben on ben.emeid = eme.emeid
                        inner join emendas.beneficiariodetalhe bed on bed.benid = ben.benid
                where
                    eme.emestatus = 'A'
                    AND ben.benstatus = 'A'
                    AND eme.prsano = '$exercicio'
                group by categoria, par.pardsc, descricao
                union all
                select  case when coalesce(par.parsigla, '') = '' then 'A Identificar' else par.parsigla end categoria, par.pardsc,
                        'Valor Após Contingenciamento' descricao, sum(bed.bedvalorpriorizado) valor
                from emendas.emenda eme
                        inner join emendas.autor aut on aut.autid = eme.autid
                        inner join emendas.partido par on par.parid = aut.parid
                        inner join emendas.beneficiario ben on ben.emeid = eme.emeid
                        inner join emendas.beneficiariodetalhe bed on bed.benid = ben.benid
                where
                    eme.emestatus = 'A'
                    AND ben.benstatus = 'A'
                    AND eme.prsano = '$exercicio'
                group by categoria, par.pardsc, descricao
                order by categoria, descricao desc";

        $dados = $this->carregar($sql);
        $dados = $dados ? $dados : [];

        $dadosAgrupados = [];
        foreach ($dados as $dado) {
            $dadosAgrupados[$dado['categoria']][$dado['descricao']] = $dado['valor'];
        }

        $sql = "select  case when coalesce(par.parlado, '') = '' then 'A Identificar' else par.parlado end categoria,
                        'Valor LOA' descricao, sum(bed.bedvalor) valor
                from emendas.emenda eme
                        inner join emendas.autor aut on aut.autid = eme.autid
                        inner join emendas.partido par on par.parid = aut.parid
                        inner join emendas.beneficiario ben on ben.emeid = eme.emeid
                        inner join emendas.beneficiariodetalhe bed on bed.benid = ben.benid
                where
                    eme.emestatus = 'A'
                    AND ben.benstatus = 'A'
                    AND eme.prsano = '$exercicio'
                group by categoria, descricao
                union all
                select  case when coalesce(par.parlado, '') = '' then 'A Identificar' else par.parlado end categoria,
                        'Valor Após Contingenciamento' descricao, sum(bed.bedvalorpriorizado) valor
                from emendas.emenda eme
                        inner join emendas.autor aut on aut.autid = eme.autid
                        inner join emendas.partido par on par.parid = aut.parid
                        inner join emendas.beneficiario ben on ben.emeid = eme.emeid
                        inner join emendas.beneficiariodetalhe bed on bed.benid = ben.benid
                where
                    eme.emestatus = 'A'
                    AND ben.benstatus = 'A'
                    AND eme.prsano = '$exercicio'
                group by categoria, descricao
                order by categoria, descricao desc";

        $dadosLado = $this->carregar($sql);
        $dadosLado = $dadosLado ? $dadosLado : [];

        $dadosAgrupadosLado = [];
        foreach ($dadosLado as $dado) {
            $dadosAgrupadosLado[$dado['categoria']][$dado['descricao']] = $dado['valor'];
        }

        include_once APPRAIZ . 'emendas/modulos/principal/grafico_partido.inc';
    }

    public function gerarGraficoSexo($exercicio, $tipo = null)
    {
        $sql = "select  case when aut.autsexo = 'M' then 'Homem' when aut.autsexo = 'F' then 'Mulher' else 'A Identificar' end categoria,
                        'Valor LOA' descricao, sum(bed.bedvalor) valor
                from emendas.emenda eme
                        inner join emendas.autor aut on aut.autid = eme.autid
                        inner join emendas.beneficiario ben on ben.emeid = eme.emeid
                        inner join emendas.beneficiariodetalhe bed on bed.benid = ben.benid
                where
                    eme.emestatus = 'A'
                    AND ben.benstatus = 'A'
                    AND eme.prsano = '$exercicio'
                group by categoria, descricao
                union all
                select  case when aut.autsexo = 'M' then 'Homem' when aut.autsexo = 'F' then 'Mulher' else 'A Identificar' end categoria,
                        'Valor Após Contingenciamento' descricao, sum(bed.bedvalorpriorizado) valor
                from emendas.emenda eme
                        inner join emendas.autor aut on aut.autid = eme.autid
                        inner join emendas.beneficiario ben on ben.emeid = eme.emeid
                        inner join emendas.beneficiariodetalhe bed on bed.benid = ben.benid
                where
                    eme.emestatus = 'A'
                    AND ben.benstatus = 'A'
                    AND eme.prsano = '$exercicio'
                group by categoria, descricao
                order by categoria, descricao desc";

        $dados = $this->carregar($sql);
        $dados = $dados ? $dados : [];

        $dadosAgrupados = [];
        foreach ($dados as $dado) {
            $dadosAgrupados[$dado['categoria']][$dado['descricao']] = $dado['valor'];
        }


        $item = 'Gênero';
        if($tipo){
            $colors =  "'#ff0066', '#00BFFF', '#FFD700'";

            $sqlPizza = "select case when aut.autsexo = 'M' then 'Homem' when aut.autsexo = 'F' then 'Mulher' else 'A Identificar' end descricao, sum(bed.bedvalor) valor
                    from emendas.emenda eme
                            inner join emendas.autor aut on aut.autid = eme.autid
                            inner join emendas.beneficiario ben on ben.emeid = eme.emeid
                            inner join emendas.beneficiariodetalhe bed on bed.benid = ben.benid
                    where eme.prsano = '$exercicio'
                    group by descricao";
            include APPRAIZ . 'emendas/modulos/principal/grafico_pizza.inc';

        } else {
            include APPRAIZ . 'emendas/modulos/principal/grafico_coluna.inc';
        }
    }

    public function gerarGraficoGnd($exercicio, $tipo = null)
    {
        $sql = "select  gnd.gnddsc categoria, gnd.gndcod, 'Valor LOA' descricao, sum(bed.bedvalor) valor
                from emendas.emenda eme
                        inner join emendas.beneficiario ben on ben.emeid = eme.emeid
                        inner join emendas.beneficiariodetalhe bed on bed.benid = ben.benid
                        inner join emendas.emendadetalhe emd on bed.emdid = emd.emdid
                        inner join public.gnd gnd on gnd.gndcod = emd.gndcod
                where
                    eme.emestatus = 'A'
                    AND ben.benstatus = 'A'
                    AND eme.prsano = '$exercicio'
                group by categoria, gnd.gndcod, descricao
                union all
                select  gnd.gnddsc categoria, gnd.gndcod, 'Valor Após Contingenciamento' descricao, sum(bed.bedvalorpriorizado) valor
                from emendas.emenda eme
                        inner join emendas.beneficiario ben on ben.emeid = eme.emeid
                        inner join emendas.beneficiariodetalhe bed on bed.benid = ben.benid
                        inner join emendas.emendadetalhe emd on bed.emdid = emd.emdid
                        inner join public.gnd gnd on gnd.gndcod = emd.gndcod
                where
                    eme.emestatus = 'A'
                    AND ben.benstatus = 'A'
                    AND eme.prsano = '$exercicio'
                group by categoria, gnd.gndcod, descricao
                order by gndcod, categoria, descricao desc";

        $dados = $this->carregar($sql);
        $dados = $dados ? $dados : [];

        $dadosAgrupados = [];
        foreach ($dados as $dado) {
            $dadosAgrupados[$dado['categoria']][$dado['descricao']] = $dado['valor'];
        }

        $item = 'GND';

        if($tipo){
            $sqlPizza = "select  gnd.gnddsc descricao, sum(bed.bedvalor) valor
                    from emendas.emenda eme
                            inner join emendas.beneficiario ben on ben.emeid = eme.emeid
                            inner join emendas.beneficiariodetalhe bed on bed.benid = ben.benid
                            inner join emendas.emendadetalhe emd on bed.emdid = emd.emdid
                            inner join public.gnd gnd on gnd.gndcod = emd.gndcod
                    where eme.prsano = '$exercicio'
                    group by descricao";
            include APPRAIZ . 'emendas/modulos/principal/grafico_pizza.inc';

        } else {
            include APPRAIZ . 'emendas/modulos/principal/grafico_coluna.inc';
        }
    }

    public function atualizarSiconv($benid = NULL)
    {
        global $configSiconv;

        $sql = "
            SELECT
                eme.*,
                uno.unocodorcamento
            FROM emendas.emenda eme
                JOIN public.unidadeorcamentaria uno ON uno.unoid = eme.unoid
            WHERE
                eme.emeid = {$this->emeid}
        ";
        $emenda = $this->pegaLinha($sql);

        # Caso seja passado o código do Beneficiario o Sistema verifica se existe Subunidade delegada
        if($benid){
            $beneficiario = new Emendas_Model_Beneficiario($benid);
            $sqlSubUnidadeDelegada = $beneficiario->montarSqlRecuperarDelegacao((object)array('exercicio' => $_SESSION['exercicio']));
            $resultadoSubUnidadeDelegada = $this->pegaLinha($sqlSubUnidadeDelegada);
            # Caso exista Unidade delegada o Sistema insere o código orcamento da UO da Subunidade delegada para buscar a proposta SICONV
            if($resultadoSubUnidadeDelegada){
                $subUnidadeDelegada = (object)$resultadoSubUnidadeDelegada;
                $emenda['unocodorcamento'] = $subUnidadeDelegada->unocodorcamento;
            }
        }

        $usuario = $configSiconv->user;
        $senha = $configSiconv->pwd;

        $arrParam = array(
            'usuario' => $usuario,
            'senha' 	=> $senha,
            'url' 	=> WEB_SERVICE_SICONV_URL,
        );
        $obWS = new WSIntegracaoSiconv($arrParam);

        $sql = "delete from siconv.propostaws";
        $this->executar($sql);

        if($emenda){
            $this->recuperarPropostaWs($obWS, $emenda);

            $mSiconv = new Emendas_Model_Siconv();

//            $filtro = [
//                "coalesce(situacaopropostaws, '') != ''",
//                "coalesce(parecerproposta, '') != ''",
//            ];

            $mSiconv->atualizar();
        }

        $this->emeatualizacaosiconv = date('Y-m-d H:i:s');
        $this->salvar();
        $this->commit();
    }

    public function atualizarPrograma()
    {
        global $configSiconv;

        $mPrograma = new Emendas_Model_Programa();
        $programas = $mPrograma->recuperarTodos();

        $usuario = $configSiconv->user;
        $senha = $configSiconv->pwd;

        $arrParam = array(
            'usuario' => $usuario,
            'senha' 	=> $senha,
            'url' 	=> WEB_SERVICE_SICONV_URL,
        );
        $obWS = new WSIntegracaoSiconv($arrParam);

        foreach ($programas as $programa){

            $filtro = [
                'prgcodigo'=>$programa['prgcodigo']
            ];

            $mPrograma->atualizar($obWS, $filtro);
            $mPrograma->commit();
            if(count($programas)>1){
                sleep(5);
            }
        }
    }

    public function recuperarPropostaWs($obWS, $emenda)
    {
        $filtro = [
            'unocod'=>$emenda['unocodorcamento'],
            'emenumero'=>substr($emenda['emenumero'], 4)
        ];
        $retorno = $obWS->consultarPropostaPorEmenda($filtro);

        if(isset($retorno->propostas)){

            $aPropostas = is_array($retorno->propostas) ? $retorno->propostas : [$retorno->propostas];
            foreach ($aPropostas as $PropostaWS){

                $mPropostaWS = new Siconv_Model_PropostaWs();

                foreach ($PropostaWS as $indice => $dados){
                    $indice = strtolower($indice);

                    if(strpos($indice, 'data')!== false){

                    } elseif(
                        'ws' == substr($indice, -2) ||
                        in_array($indice, ['parecerplanotrabalho', 'parecerproposta'])
                    ){
                        $dados = json_encode($dados);
                    }

                    if(key_exists($indice, $mPropostaWS->arAtributos)){
                        $mPropostaWS->{$indice} = $dados;
                    }
                }

                $mPropostaWS->emeid = $emenda['emeid'];
                $mPropostaWS->salvar();
                $mPropostaWS->commit();

                unset($mPropostaWS);
            }
        }
    }

}//end Class
?>
